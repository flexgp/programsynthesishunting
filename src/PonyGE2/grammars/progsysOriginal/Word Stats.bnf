<predefined> ::= 'i0 = int(); i1 = int(); i2 = int()'
'b0 = bool(); b1 = bool(); b2 = bool()'
'f0 = float(); f1 = float(); f2 = float()'
's0 = str(); s1 = str(); s2 = str()'
'li0 = []; li1 = []; li2 = []'
'lf0 = []; lf1 = []; lf2 = []'
'ls0 = []; ls1 = []; ls2 = []'
'res0 = []; res1 = int(); res2 = float()'
<code>
<code> ::= <code><statement>'\n'|<statement>'\n'
<statement> ::= <simple_stmt>|<compound_stmt>
<simple_stmt> ::= <call>|<assign>
<compound_stmt> ::= <for>|<if>|'loopBreak% = 0\nwhile '<bool>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}loopBreak% += 1\n:}'
<call> ::= <list_int_var>'.append('<int>')'|<list_int_var>'.insert('<int>','<int>')'|'deleteListItem('<list_int>', '<int>')'|'setListIndexTo('<list_int>', '<int>', '<int>')'|<list_float_var>'.insert('<int>','<float>')'|'deleteListItem('<list_float>', '<int>')'|'setListIndexTo('<list_float>', '<int>', '<float>')'|<list_float_var>'.append('<float>')'|<list_string_var>'.insert('<int>','<string>')'|'deleteListItem('<list_string>', '<int>')'|'setListIndexTo('<list_string>', '<int>', '<string>')'|<list_string_var>'.append('<string>')'
<assign> ::= <bool_var>' = '<bool>|<int_assign>|<float_assign>|<string_var>' = '<string>|<list_int_var>' = '<list_int>|<list_float_var>' = '<list_float>|<list_string_var>' = '<list_string>
<for> ::= 'loopBreak% = 0\nfor forCounter% in '<list_int>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<int_var>' in '<list_int>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor forCounter% in '<list_float>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<float_var>' in '<list_float>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor forCounter% in '<list_string>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<string_var>' in '<list_string>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}loopBreak% += 1\n:}'
<number> ::= <number><num>|<num>
<num> ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
<comp_op> ::= '<'|'>'|'=='|'>='|'<='|'!='|'is'|'is not'
<string_const_part> ::= <string_const_part><string_literal>|<string_literal>
<in_list_comp_op> ::= 'in'|'not in'
<list_comp_op> ::= '=='|'!='
<bool_var> ::= 'b0'|'b1'|'b2'
<bool> ::= <bool_var>|<bool_const>|'not '<bool>|'( '<bool>' '<bool_op>' '<bool>' )'|<int>' '<comp_op>' '<int>|<float>' '<comp_op>' '<float>|<int>' '<comp_op>' '<float>|<float>' '<comp_op>' '<int>|<string>' in '<string>|<string>' not in '<string>|<string>' == '<string>|<string>' != '<string>|<string>'.startswith('<string>')'|<string>'.endswith('<string>')'|<int>' '<in_list_comp_op>' '<list_int>|<list_int>' '<list_comp_op>' '<list_int>|<float>' '<in_list_comp_op>' '<list_float>|<list_float>' '<list_comp_op>' '<list_float>|<string>' '<in_list_comp_op>' '<list_string>|<list_string>' '<list_comp_op>' '<list_string>
<bool_op> ::= 'and'|'or'
<bool_const> ::= 'True'|'False'
<if> ::= 'if '<bool>':{:\n'<code>':}'|'if '<bool>':{:\n'<code>':}else:{:\n'<code>':}'
<int_var> ::= 'i0'|'i1'|'i2'|'res1'
<int_assign> ::= <int_var>' = '<int>|<int_var>' '<arith_ops>'= '<int>
<int> ::= <int_var>|'int('<number>'.0)'|<arith_prefix><int>|'( '<int>' '<arith_ops>' '<int>' )'|<int_arith_ops_protected>'('<int>','<int>')'|'min('<int>', '<int>')'|'max('<int>', '<int>')'|'abs('<int>')'|'int(math.ceil('<float>'))'|'int(math.floor('<float>'))'|'int(round('<float>'))'|'int('<float>')'|'len('<string>')'|'saveOrd('<string>')'|'getIndexIntList('<list_int>', '<int>')'|'len('<list_int>')'|'len('<list_float>')'|'len('<list_string>')'
<arith_ops> ::= '+'|'-'|'*'
<int_arith_ops_protected> ::= 'divInt'|'mod'
<arith_prefix> ::= '+'|'-'
<float> ::= <int>|<float_var>|<number>'.'<number>|<arith_prefix><float>|'( '<float>' '<arith_ops>' '<float>' )'|'( '<int>' '<arith_ops>' '<float>' )'|'( '<float>' '<arith_ops>' '<int>' )'|<float_arith_ops_protected>'('<float>','<float>')'|<float_arith_ops_protected>'('<int>','<float>')'|<float_arith_ops_protected>'('<float>','<int>')'|'math.ceil('<float>')'|'math.floor('<float>')'|'round('<float>')'|'min('<float>', '<float>')'|'min('<int>', '<float>')'|'min('<float>', '<int>')'|'max('<float>', '<float>')'|'max('<int>', '<float>')'|'max('<float>', '<int>')'|'abs('<float>')'|'getIndexFloatList('<list_float>', '<int>')'
<float_var> ::= 'f0'|'f1'|'f2'|'res2'
<float_assign> ::= <float_var>' = '<float>|<float_var>' '<arith_ops>'= '<float>
<float_arith_ops_protected> ::= 'div'|'divInt'|'mod'
<string_var> ::= 's0'|'s1'|'s2'|'in0'
<string> ::= <string_var>|"'"<string_const_part>"'"|<string_slice>|'getCharFromString('<string>', '<int>')'|'saveChr('<int>')'|'('<string>' + '<string>')'|<string>'.lstrip()'|<string>'.rstrip()'|<string>'.strip()'|<string>'.lstrip('<string>')'|<string>'.rstrip('<string>')'|<string>'.strip('<string>')'|<string>'.capitalize()'|<string>'.join('<list_string>')'|'getIndexStringList('<list_string>', '<int>')'
<string_slice> ::= <string>'['<int>':'<int>']'|<string>'[:'<int>']'|<string>'['<int>':]'
<string_literal> ::= ''|'\\\n'|'\\\t'|' '|'!'|'"'|'#'|'$'|'%'|'&'|"\\'"|'('|')'|'*'|'+'|','|'-'|'.'|'/'|'0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|':'|';'|'<'|'='|'>'|'?'|'@'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'['|'\\\\'|']'|'^'|'_'|'`'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'|'{'|'|'|'}'
<list_int_var> ::= 'li0'|'li1'|'li2'|'res0'
<list_int> ::= <list_int_var>|'list(saveRange('<int>','<int>'))'|<list_int_slice>
<list_int_slice> ::= <list_int>'['<int>':'<int>']'|<list_int>'[:'<int>']'|<list_int>'['<int>':]'
<list_float_var> ::= 'lf0'|'lf1'|'lf2'
<list_float> ::= <list_float_var>|<list_float_slice>
<list_float_slice> ::= <list_float>'['<int>':'<int>']'|<list_float>'[:'<int>']'|<list_float>'['<int>':]'
<list_string_var> ::= 'ls0'|'ls1'|'ls2'
<list_string> ::= <list_string_var>|<list_string_slice>|'saveSplit('<string>','<string>')'
<list_string_slice> ::= <list_string>'['<int>':'<int>']'|<list_string>'[:'<int>']'|<list_string>'['<int>':]'
