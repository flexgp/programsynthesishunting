<predefined> ::= 'i0 = int(); i1 = int(); i2 = int()'
'li0 = []; li1 = []; li2 = []'
'res0 = []'
<code>
<code> ::= <code><statement>'\n'|<statement>'\n'
<statement> ::= <call>|<assign>|<for>
<assign> ::= <int_assign>|<list_int_var>' = '<list_int>
<for> ::= <for_int>
<call> ::= <call_int>
<in_list_comp_op> ::= 'in'|'not in'
<list_comp_op> ::= '=='|'!='
<number> ::= <number><num>|<num>
<num> ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
<int_var> ::= 'i0'|'i1'|'i2'
<int_assign> ::= <int_var>' = '<int>|<int_var>' '<arith_ops>'= '<int>
<int> ::= <int_var>|<int_operation>|<int_specialop>
<int_operation> ::= '( '<int>' '<arith_ops>' '<int>' )'|<int_arith_ops_protected>'('<int>','<int>')'
<int_specialop> ::= 'getIndexIntList('<list_int>', '<int>')'|'len('<list_int>')'
<arith_ops> ::= '+'
<int_arith_ops_protected> ::= 'divInt'|'mod'
<for_int> ::= 'loopBreak% = 0\nfor '<int_var>' in range(len('<list_int>')):{:\n'<code>'\nif loopBreak% > loopBreakConst or stop:{:\nbreak\n:}loopBreak% += 1\n:}'
<call_int> ::= <list_int_var>'.append('<int>')'|<list_int_var>'.insert('<int>','<int>')'|'deleteListItem('<list_int>', '<int>')'|'setListIndexTo('<list_int>', '<int>', '<int>')'|<list_int_var>'.reverse()'
<list_int_var> ::= 'li0'|'li1'|'li2'|'in0'|'in1'|'res0'
<list_int> ::= <list_int_var>|'list(saveRange('<int>','<int>'))'|<list_int_slice>
<list_int_slice> ::= <list_int>'['<int>':'<int>']'|<list_int>'[:'<int>']'|<list_int>'['<int>':]'

